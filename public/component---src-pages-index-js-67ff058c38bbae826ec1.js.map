{"version":3,"file":"component---src-pages-index-js-67ff058c38bbae826ec1.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/imgs/Suzuki.png","webpack://gatsby-starter-hello-world/./src/components/header.js","webpack://gatsby-starter-hello-world/./src/data/listadoMotos.js","webpack://gatsby-starter-hello-world/./src/components/Moto.js","webpack://gatsby-starter-hello-world/./src/components/catalogo.js","webpack://gatsby-starter-hello-world/./src/components/footer.js","webpack://gatsby-starter-hello-world/./node_modules/graphql/jsutils/invariant.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/language/location.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/language/printLocation.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/error/GraphQLError.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/jsutils/isObjectLike.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/error/syntaxError.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/language/directiveLocation.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/language/tokenKind.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/language/lexer.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql/language/parser.mjs","webpack://gatsby-starter-hello-world/./node_modules/graphql-tag/lib/index.js","webpack://gatsby-starter-hello-world/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js","webpack://gatsby-starter-hello-world/./node_modules/@apollo/client/react/parser/index.js","webpack://gatsby-starter-hello-world/./node_modules/@apollo/client/react/hooks/useQuery.js","webpack://gatsby-starter-hello-world/./node_modules/@apollo/client/react/hooks/useApolloClient.js","webpack://gatsby-starter-hello-world/./src/pages/index.js","webpack://gatsby-starter-hello-world/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/Suzuki-71e91e02833886e5fcf37aa991d8c182.png\";","import React from \"react\";\r\nimport imgSuzuki from \"../imgs/Suzuki.png\"\r\n\r\nexport default(props) => (\r\n    \r\n    <header className=\"border-solid\tborder-b-2 border-neutral-900\">\r\n        <div className=\"header\">\r\n            <img className=\"img-suzuki\" src={imgSuzuki}></img>\r\n        </div>\r\n        \r\n        <h1>{props.contacto.nombre}</h1>\r\n            <h1>{props.contacto.documento}</h1>\r\n            <h1>{props.contacto.telefono}</h1>\r\n            <h1>{props.contacto.wapp}</h1>\r\n            <h1>{props.contacto.instagram}</h1>\r\n            <h1>{props.contacto.direccion}</h1>\r\n            <h1>{props.contacto.vitrina}</h1>\r\n    </header>\r\n)","export default [\r\n    {\r\n        \"id\": \"gixxer-150\",\r\n        \"nombre\": \"Gixxer 150 FI ABS\",\r\n        \"pdf\": \"../static/data/GIXXER-150-FI-ABS.pdf\",\r\n        \"imagen\": \"../static/img/gixxer-fi-150-abs.png\"\r\n    },\r\n    {\r\n        \"id\": \"gixxer-250-sf\",\r\n        \"nombre\": \"Gixxer 250 SF\",\r\n        \"pdf\": \"../static/data/GIXXER-250-SF.pdf\",\r\n        \"imagen\": \"../static/img/gixxer-sf-250-suprema.png\"\r\n    },\r\n    {\r\n        \"id\": \"gixxer-250\",\r\n        \"nombre\": \"Gixxer 250\",\r\n        \"pdf\": \"../static/data/GIXXER-250.pdf\",\r\n        \"imagen\": \"../static/img/gixxer-250.png\"\r\n    },\r\n    {\r\n        \"id\": \"gn-125\",\r\n        \"nombre\": \"GN 125\",\r\n        \"pdf\": \"../static/data/GN-125.pdf\",\r\n        \"imagen\": \"../static/img/gN-125.png\"\r\n    },\r\n    {\r\n        \"id\": \"gsx-r-150\",\r\n        \"nombre\": \"GSX R 150 ABS\",\r\n        \"pdf\": \"../static/data/GSX-R-150-2022-ABS.pdf\",\r\n        \"imagen\": \"../static/img/gsx-r-150.png\"\r\n    },\r\n    {\r\n        \"id\": \"gsx-s\",\r\n        \"nombre\": \"GSX S 2022 ABS\",\r\n        \"pdf\": \"../static/data/GSX-S-2022-ABS.pdf\",\r\n        \"imagen\": \"../static/img/gsx-s-150.png\"\r\n    },\r\n    {\r\n        \"id\": \"gsx-s-1000\",\r\n        \"nombre\": \"GSX S 1000\",\r\n        \"pdf\": \"../static/data/GSX-S1000.pdf\",\r\n        \"imagen\": \"../static/img/gsx-s-1000.png\"\r\n    },\r\n    {\r\n        \"id\": \"hayabusa\",\r\n        \"nombre\": \"HAYABUSA\",\r\n        \"pdf\": \"../static/data/HAYABUSA.pdf\",\r\n        \"imagen\": \"../static/img/hayabusa.png\"\r\n    },\r\n]","import React from \"react\"\r\n\r\nexport default(props) => (\r\n    <div className=\"cont-moto\">\r\n        <a className=\"link-moto\" href={props.item.pdf} target=\"_blank\">\r\n            <img className=\"moto\" src={props.item.imagen}></img>\r\n        </a>\r\n    </div>    \r\n)","import React from \"react\"\r\nimport Motos from \"../data/listadoMotos\"\r\nimport Moto from \"./Moto\"\r\n\r\nexport default() => (\r\n    <div className=\"catalogo\">\r\n        {\r\n            Motos.map((moto) => {\r\n                return <Moto item={moto} key={moto.id}/>\r\n            })\r\n        }\r\n    </div>\r\n)","import React from \"react\";\r\n\r\nexport default() => (\r\n    <footer>\r\n        <div className=\"footer\">\r\n            <span>SUZUKI MOTOR DE COLOMBIA S.A.</span>\r\n            <span>Todos los derechos reservados</span>\r\n            <span>Nit 891410137-2</span>\r\n        </div>    \r\n        <div className=\"demo\">\r\n            <p className=\"textDemo\">*** DEMO ***</p>\r\n            <p>AGENCIA NN® - agenciann@gmail.com</p>\r\n        </div>\r\n    </footer>\r\n)","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {\n    var value = getSnapshot();\n    if (__DEV__ &&\n        !didWarnUncachedGetSnapshot &&\n        value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n    }\n    var _a = React.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];\n    if (canUseLayoutEffect) {\n        React.useLayoutEffect(function () {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        }, [subscribe, value, getSnapshot]);\n    }\n    else {\n        Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n    }\n    React.useEffect(function () {\n        if (checkIfSnapshotChanged(inst)) {\n            forceUpdate({ inst: inst });\n        }\n        return subscribe(function handleStoreChange() {\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        });\n    }, [subscribe]);\n    return value;\n});\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n//# sourceMappingURL=useSyncExternalStore.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 32);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === 'FragmentDefinition') {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === 'OperationDefinition') {\n            switch (x.operation) {\n                case 'query':\n                    queries.push(x);\n                    break;\n                case 'mutation':\n                    mutations.push(x);\n                    break;\n                case 'subscription':\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    __DEV__ ? invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), 33);\n    __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") +\n        \"subscriptions and \".concat(mutations.length, \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 34);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") +\n        \"\".concat(definitions.length, \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 35);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nexport function verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") +\n        \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 36);\n}\n//# sourceMappingURL=index.js.map","import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState, } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus, } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n    var stateRef = useRef();\n    if (!stateRef.current ||\n        client !== stateRef.current.client ||\n        query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    var _a = useState(0), _tick = _a[0], setTick = _a[1];\n    state.forceUpdate = function () {\n        setTick(function (tick) { return tick + 1; });\n    };\n    return state;\n}\nvar InternalState = (function () {\n    function InternalState(client, query, previous) {\n        this.client = client;\n        this.query = query;\n        this.asyncResolveFns = new Set();\n        this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();\n        this.ssrDisabledResult = maybeDeepFreeze({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.loading,\n        });\n        this.skipStandbyResult = maybeDeepFreeze({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.ready,\n        });\n        this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n        verifyDocumentType(query, DocumentType.Query);\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    InternalState.prototype.forceUpdate = function () {\n        __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n    };\n    InternalState.prototype.asyncUpdate = function (signal) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var watchQueryOptions = _this.watchQueryOptions;\n            var handleAborted = function () {\n                _this.asyncResolveFns.delete(resolve);\n                _this.optionsToIgnoreOnce.delete(watchQueryOptions);\n                signal.removeEventListener('abort', handleAborted);\n                reject(signal.reason);\n            };\n            _this.asyncResolveFns.add(resolve);\n            _this.optionsToIgnoreOnce.add(watchQueryOptions);\n            signal.addEventListener('abort', handleAborted);\n            _this.forceUpdate();\n        });\n    };\n    InternalState.prototype.useQuery = function (options) {\n        var _this = this;\n        this.renderPromises = useContext(getApolloContext()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = useSyncExternalStore(useCallback(function () {\n            if (_this.renderPromises) {\n                return function () { };\n            }\n            var onNext = function () {\n                var previousResult = _this.result;\n                var result = obsQuery.getCurrentResult();\n                if (previousResult &&\n                    previousResult.loading === result.loading &&\n                    previousResult.networkStatus === result.networkStatus &&\n                    equal(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function (error) {\n                var last = obsQuery[\"last\"];\n                subscription.unsubscribe();\n                try {\n                    obsQuery.resetLastResults();\n                    subscription = obsQuery.subscribe(onNext, onError);\n                }\n                finally {\n                    obsQuery[\"last\"] = last;\n                }\n                if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult ||\n                    (previousResult && previousResult.loading) ||\n                    !equal(error, previousResult.error)) {\n                    _this.setResult({\n                        data: (previousResult && previousResult.data),\n                        error: error,\n                        loading: false,\n                        networkStatus: NetworkStatus.error,\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            return function () { return subscription.unsubscribe(); };\n        }, [\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches,\n        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });\n        this.unsafeHandlePartialRefetch(result);\n        var queryResult = this.toQueryResult(result);\n        if (!queryResult.loading && this.asyncResolveFns.size) {\n            this.asyncResolveFns.forEach(function (resolve) { return resolve(queryResult); });\n            this.asyncResolveFns.clear();\n        }\n        return queryResult;\n    };\n    InternalState.prototype.useOptions = function (options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n            !equal(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n                this.observable.reobserve(this.getObsQueryOptions());\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) &&\n            this.queryHookOptions.ssr === false &&\n            !this.queryHookOptions.skip) {\n            this.result = this.ssrDisabledResult;\n        }\n        else if (this.queryHookOptions.skip ||\n            this.watchQueryOptions.fetchPolicy === 'standby') {\n            this.result = this.skipStandbyResult;\n        }\n        else if (this.result === this.ssrDisabledResult ||\n            this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function () {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults)\n            toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(mergeOptions);\n    };\n    InternalState.prototype.createWatchQueryOptions = function (_a) {\n        var _b;\n        if (_a === void 0) { _a = {}; }\n        var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });\n        if (this.renderPromises &&\n            (watchQueryOptions.fetchPolicy === 'network-only' ||\n                watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n            watchQueryOptions.fetchPolicy = 'cache-first';\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: 'standby',\n            });\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||\n                    this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function () {\n        var _a, _b;\n        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n            \"cache-first\");\n    };\n    InternalState.prototype.onCompleted = function (data) { };\n    InternalState.prototype.onError = function (error) { };\n    InternalState.prototype.useObservableQuery = function () {\n        var obsQuery = this.observable =\n            this.renderPromises\n                && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n                || this.observable\n                || this.client.watchQuery(this.getObsQueryOptions());\n        this.obsQueryFields = useMemo(function () { return ({\n            refetch: obsQuery.refetch.bind(obsQuery),\n            reobserve: obsQuery.reobserve.bind(obsQuery),\n            fetchMore: obsQuery.fetchMore.bind(obsQuery),\n            updateQuery: obsQuery.updateQuery.bind(obsQuery),\n            startPolling: obsQuery.startPolling.bind(obsQuery),\n            stopPolling: obsQuery.stopPolling.bind(obsQuery),\n            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n        }); }, [obsQuery]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false ||\n            this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function (nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function (result) {\n        var _this = this;\n        if (!result.loading) {\n            var error_1 = this.toApolloError(result);\n            Promise.resolve().then(function () {\n                if (error_1) {\n                    _this.onError(error_1);\n                }\n                else if (result.data) {\n                    _this.onCompleted(result.data);\n                }\n            }).catch(function (error) {\n                __DEV__ && invariant.warn(error);\n            });\n        }\n    };\n    InternalState.prototype.toApolloError = function (result) {\n        return isNonEmptyArray(result.errors)\n            ? new ApolloError({ graphQLErrors: result.errors })\n            : result.error;\n    };\n    InternalState.prototype.getCurrentResult = function () {\n        if (!this.result) {\n            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function (result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult)\n            return queryResult;\n        var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n        this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData }));\n        if (!queryResult.error && isNonEmptyArray(result.errors)) {\n            queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n        if (result.partial &&\n            this.queryHookOptions.partialRefetch &&\n            !result.loading &&\n            (!result.data || Object.keys(result.data).length === 0) &&\n            this.observable.options.fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: NetworkStatus.refetch,\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}());\n//# sourceMappingURL=useQuery.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport { useContext } from 'react';\nimport { getApolloContext } from \"../context/index.js\";\nexport function useApolloClient(override) {\n    var context = useContext(getApolloContext());\n    var client = override || context.client;\n    __DEV__ ? invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n        'instance in via options.') : invariant(!!client, 31);\n    return client;\n}\n//# sourceMappingURL=useApolloClient.js.map","import React from 'react';\r\nimport Header from \"../components/header\"\r\nimport Catalogo from \"../components/catalogo\"\r\nimport Footer from \"../components/footer\"\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst USUARIOS_QUERY = gql`\r\n  query QueryUsuarios($registro: String!){\r\n    usuariosJson(registro: {eq: $registro}) {\r\n      id\r\n      registro\r\n      documento\r\n      nombre\r\n      telefono\r\n      wapp\r\n      instagram\r\n      direccion\r\n      vitrina\r\n    }\r\n  }\r\n`;\r\n\r\nconst Index = ({location}) => {\r\n  \r\n  let qparams = new URLSearchParams(location.search);\r\n  let contacto = {};\r\n  let registro = qparams.get(\"u\");\r\n  let archivo = qparams.get(\"f\")\r\n\r\n  if (!registro)\r\n    registro = \"\";  \r\n  \r\n  let { loading, error, data } = useQuery(USUARIOS_QUERY, {\r\n    variables: { registro },\r\n    notifyOnNetworkStatusChange: true\r\n  });\r\n\r\n  if (loading) return <div>Cargando...</div>;\r\n  if (error) return <div>Error al cargar la página, consulte con el administrador.</div>;\r\n\r\n  if (data.usuariosJson)\r\n    contacto = data.usuariosJson;\r\n  \r\n  return (\r\n    <div>\r\n      <Header contacto={contacto}/>\r\n      <Catalogo/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}"],"names":["props","className","src","imgSuzuki","contacto","nombre","documento","telefono","wapp","instagram","direccion","vitrina","href","item","pdf","target","imagen","Motos","moto","Moto","key","id","invariant","condition","message","Boolean","Error","LineRegExp","getLocation","source","position","lastLineStart","line","match","body","matchAll","index","length","column","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","name","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","map","subLine","existingLines","filter","_","undefined","padLen","max","prefix","join","GraphQLError","constructor","rawArgs","_this$nodes","_nodeLocations$","_ref","nodes","positions","path","originalError","extensions","args","firstArg","toNormalizedOptions","super","this","undefinedIfEmpty","Array","isArray","nodeLocations","node","loc","start","locations","pos","originalExtensions","value","Object","create","defineProperties","writable","enumerable","stack","defineProperty","configurable","captureStackTrace","toStringTag","Symbol","toString","output","location","toJSON","formattedError","keys","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","lastToken","token","lineStart","advance","lookahead","kind","next","nextToken","readNextToken","end","prev","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","readBlockString","readString","readNumber","readName","firstCode","isFloat","readDigits","chunkStart","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","Parser","options","sourceObj","_lexer","_options","_tokenCounter","parseName","expectToken","parseDocument","definitions","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","selections","parseSelection","parseFragment","parseField","nameOrAlias","alias","arguments","parseArguments","isConst","parseConstArgument","parseArgument","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","expectKeyword","allowLegacyFragmentVariables","parseList","parseObject","advanceLexer","parseStringLiteral","varName","block","values","any","fields","parseObjectField","parseDirective","innerType","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","delimitedMany","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","types","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseEnumValueName","getTokenDesc","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","prototype","hasOwnProperty","call","startToken","noLocation","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","maxTokens","isPunctuatorTokenKind","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","processFragments","ast","seenKeys","Set","forEach","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","get","has","console","warn","set","add","cacheKey","parsed","parse","doc","workSet","endToken","stripLoc","gql","literals","_i","result","arg","gql_1","extras","clear","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","didWarnUncachedGetSnapshot","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","__DEV__","_a","inst","forceUpdate","canUse","assign","checkIfSnapshotChanged","_b","DocumentType","cache","operationName","Query","Mutation","Subscription","verifyDocumentType","document","variables","cached","concat","fragments","queries","mutations","subscriptions","x","definition","payload","parser","requiredOperationName","usedOperationName","useQuery","query","client","stateRef","useRef","current","InternalState","state","useState","setTick","tick","useInternalState","override","context","useContext","previous","asyncResolveFns","optionsToIgnoreOnce","WeakSet","ssrDisabledResult","maybeDeepFreeze","loading","data","error","networkStatus","skipStandbyResult","toQueryResultCache","WeakMap","previousResult","previousData","asyncUpdate","signal","_this","Promise","resolve","reject","watchQueryOptions","handleAborted","delete","removeEventListener","reason","addEventListener","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","setResult","onError","last","subscription","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","observable","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","errors","graphQLErrors","resultWithoutPartial","partial","called","partialRefetch","USUARIOS_QUERY","strings","raw","qparams","URLSearchParams","search","registro","notifyOnNetworkStatusChange","usuariosJson"],"sourceRoot":""}